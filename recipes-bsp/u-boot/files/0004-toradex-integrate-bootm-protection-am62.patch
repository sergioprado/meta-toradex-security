From d88b5ee767ce6e296946264ee5f4e8469e67fb36 Mon Sep 17 00:00:00 2001
From: Rogerio Guerra Borin <rogerio.borin@toradex.com>
Date: Thu, 7 Sep 2023 23:54:48 -0300
Subject: [PATCH 04/10] toradex: integrate bootm protection (am62)

Integrate the protection to the bootm command to only allow booting
from FIT images. With the proper configuration of U-Boot (enabling FIT
signing) one can ensure only signed FIT images can be booted when the
hardening is enabled at runtime.

Upstream-Status: Inappropriate [TorizonCore specific]

Signed-off-by: Rogerio Guerra Borin <rogerio.borin@toradex.com>
---
 Kconfig      |  7 ++++++
 boot/bootm.c | 65 +++++++++++++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 71 insertions(+), 1 deletion(-)

diff --git a/Kconfig b/Kconfig
index af670bac628..c843e29d1cd 100644
--- a/Kconfig
+++ b/Kconfig
@@ -614,6 +614,7 @@ source "tools/Kconfig"
 config TDX_SECBOOT_HARDENING
 	bool "Toradex Secure Boot hardening"
 	select TDX_CMD_WHITELIST
+	select TDX_BOOTM_PROTECTION
 	help
 	  This causes the Secure Boot hardening features added by Toradex
 	  to be built into U-Boot, including:
@@ -638,3 +639,9 @@ config TDX_CMD_WHITELIST
 	bool
 	help
 	  Enable the command white-listing feature provided by Toradex.
+
+config TDX_BOOTM_PROTECTION
+	bool
+	help
+	  Enable the protection in bootm to prevent execution of unsigned
+	  images.
diff --git a/boot/bootm.c b/boot/bootm.c
index 4144ff3b031..19a6689a50f 100644
--- a/boot/bootm.c
+++ b/boot/bootm.c
@@ -32,6 +32,7 @@
 #include <command.h>
 #include <bootm.h>
 #include <image.h>
+#include <tdx-harden.h>
 
 #define MAX_CMDLINE_SIZE	SZ_4K
 
@@ -72,7 +73,29 @@ static int bootm_start(struct cmd_tbl *cmdtp, int flag, int argc,
 		       char *const argv[])
 {
 	memset((void *)&images, 0, sizeof(images));
+
+#if CONFIG_IS_ENABLED(TDX_BOOTM_PROTECTION)
+	/*
+	 * When the "bootm" protection is enabled at build-time, FIT signature
+	 * verification is supposed to follow the status of the hardening. For
+	 * this, we assume CONFIG_FIT_SIGNATURE is set and here we set the
+	 * value of the "verify" field to match the status of the hardening.
+	 * With this we have:
+	 *
+	 * - If hardening is enabled => validate/enforce correct signature.
+	 * - If hardening is disabled => do not check signature.
+	 *
+	 * The logic above should be appropriate for allowing a bootloader
+	 * binary to be altered between non-secure and secure modes. Notice
+	 * that when this "bootm" protection is enabled the environment
+	 * variable "verify" is no longer used at the moment.
+	 *
+	 * TODO: Consider adding "verify" as part of the logic.
+	 */
+	images.verify = tdx_hardening_enabled();
+#else
 	images.verify = env_get_yesno("verify");
+#endif
 
 	boot_start_lmb(&images);
 
@@ -895,6 +918,7 @@ static const void *boot_get_kernel(struct cmd_tbl *cmdtp, int flag, int argc,
 	struct legacy_img_hdr	*hdr;
 #endif
 	ulong		img_addr;
+	int		fmt;
 	const void *buf;
 	const char	*fit_uname_config = NULL;
 	const char	*fit_uname_kernel = NULL;
@@ -918,7 +942,46 @@ static const void *boot_get_kernel(struct cmd_tbl *cmdtp, int flag, int argc,
 	/* check image type, for FIT images get FIT kernel node */
 	*os_data = *os_len = 0;
 	buf = map_sysmem(img_addr, 0);
-	switch (genimg_get_format(buf)) {
+	fmt = genimg_get_format(buf);
+
+#if CONFIG_IS_ENABLED(TDX_BOOTM_PROTECTION)
+	if (tdx_hardening_enabled()) {
+		/* hardening enabled at runtime. */
+		if (fmt != IMAGE_FORMAT_FIT) {
+			/* accept FIT images only. */
+			puts("ERROR: can't boot from non-FIT images with "
+			     "hardening enabled.\n");
+			return NULL;
+		}
+
+		/*
+		 * For TorizonCore we expect a configuration to be always passed
+		 * by the boot script; at the CLI level this means the usage
+		 * syntax would be this one:
+		 *
+		 * bootm [<addr1>]#<conf>[#<extra-conf[#...]]
+		 *
+		 * Since one can easily bypass the signature checks by directly
+		 * specifying the kernel/ramdisk/fdt, here we enforce the above
+		 * usage where a <conf> name is passed in which case the
+		 * signature validation is performed for the configuration
+		 * (which then covers the images). This is done by requiring
+		 * 'fit_uname_config' to be non-null. As an extra caution, we
+		 * also enforce variable 'fit_uname_kernel' not to be null to
+		 * prevent the use where a kernel image is specified directly,
+		 * i.e. not via a configuration.
+		 *
+		 */
+		if ((argc != 1) ||
+		    (fit_uname_config == NULL) || (fit_uname_kernel != NULL)) {
+			puts("ERROR: bootm only accepts booting from a "
+			     "configuration when hardening is enabled.\n");
+			return NULL;
+		}
+	}
+#endif
+
+	switch (fmt) {
 #if CONFIG_IS_ENABLED(LEGACY_IMAGE_FORMAT)
 	case IMAGE_FORMAT_LEGACY:
 		printf("## Booting kernel from Legacy Image at %08lx ...\n",
-- 
2.25.1

